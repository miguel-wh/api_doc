description: |
  This is a sample server Petstore server.
  You can find out more about Swagger at
  [http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).
  For this sample, you can use the api key `special-key` to test the authorization filters.
  # Introduction
  This API is documented
  # WebSocket

  If the endpoint returns the following response:

  ```
    {
      "facility": "a474b7e8-1056-4e7d-9a71-54ec32e5152d"
    }
  ```


  ### How to get the data?

  ```facility``` It is a UUID Process, to obtain the data, it is required to open a WebSocket connection using facility.


  ### What steps should you follow?

  - Consume API in any language programmation.
  - Get facility from request
  - Open a WebSocket connection using **facility**. You can use any WebSocket client of your choice

  ```
      Request URL WebSocket:
      wss://{{your_subdomain}}.adminolt.com/ws/{{facility}}?subscribe-broadcast
  ```

  ## Example 1
  
  **Step 1**

  - Consume API in any language programmation.
  - Get facility from request

  This is a example with Python-Django
  ```
  from django.shortcuts import render
  import requests
  
  def get_api_example(request):
    endpoint = "https://{{your_subdomain}}.adminolt.com/api/onu/unauthorized/"
    token = "{{your_token}}"

    headers = {
        "Authorization": "Token {0}".format(token)
    }
    response = requests.get(url=endpoint, headers=headers)
    data = response.json()
    facility = data.get('facility') # Send facility to web browser

    return render(request, 'ws/ws.html', {"facility": facility})

  ```

  **Step 2 - Send "facility" to web browser**
  ```
  <script>
    var key_facility = "{{facility}}"
  </script>
  ```


  **Step 3 - Import the next files (libraries)**

  ```
  <input id="WEBSOCKET_URI" type="hidden" value="wss://{{your_subdomain}}.adminolt.com/ws/">
  <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.5.1/jquery.min.js"></script>
  <script type="text/javascript" src="https://adminolt.com/static/js/ws4redis.js"></script>
  <script type="text/javascript" src="https://adminolt.com/static/js/websocket-adminolt.js"></script>
  ```

  **Step 4 - Make connection to the websocket**

  To make the connection through websocket and obtain data, call the following function.

  ```task_adminolt_ajax(facility)```
  Receive as argument: facility


  This function is defined in the file.


  ```<script type="text/javascript" src="https://adminolt.com/static/js/websocket-adminolt.js"></script>```
  
  **Example**
  ```
  <script>
    task_adminolt_ajax(key_facility)
  </script>
  ```

  **Step 5 - Results**

  Once the connection to the websocket was successful and the status is "DONE".
  You can use data inside the function. 

  ```function task_custom_done(data){}```
  Passing data as argument
  
  **Example**
  ```
  <script>
    function task_custom_done(data){

      // Remove the loader component when returning data.
      $(".loading-gif, .jobstatic-panel").hide();
      $("#content-loading-gif").hide();

      // response data
      console.log(data)
    }
  </script>
  ```


  **Full example**
  ```
    <!DOCTYPE html>
    <html>
    <head>
      <meta charset="utf-8">
      <title></title>
    </head>
    <body>
        <h2>Response data</h2>
        <div id="info" style="font-size: 20px; overflow: hidden; position: absolute; width: 100%; height: 100%; display: flex; justify-content: center; align-items: center;">
            
        </div>

    </body>
    <input id="WEBSOCKET_URI" type="hidden" value="wss://{{your_subdomain}}.adminolt.com/ws/">
    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.5.1/jquery.min.js"></script>
    <script type="text/javascript" src="https://adminolt.com/static/js/ws4redis.js"></script>
    <script type="text/javascript" src="https://adminolt.com/static/js/websocket-adminolt.js"></script>

    <script type="text/javascript">

    var key_facility = "{{facility}}" // facility

    // To make the connection through websocket and obtain data, call the following function. 
    // Receive as argument: facility
    task_adminolt_ajax(key_facility)  //This function is defined in the file. <script type="text/javascript" src="https://adminolt.com/static/js/websocket-adminolt.js"><script>



    //Once the connection to the websocket was successful and the status is "DONE"
    //You can use data inside the function. Passing data as argument
    function task_custom_done(data){

      // Remove the loader component when returning data.
      $(".loading-gif, .jobstatic-panel").hide();
      $("#content-loading-gif").hide();

      // response data
      console.log(data)
      const info = document.getElementById("info")
      info.innerHTML = JSON.stringify(data);
    }

    </script>
    </html>
  ```

  ### Result data

  ![Baeldung](https://wisphub.net/media/uploadsCKEditor/miguelangel%40wisphub/2021/12/22/response_data2.png)
  ![Baeldung](https://wisphub.net/media/uploadsCKEditor/miguelangel%40wisphub/2021/12/22/console_data.png)
  

  ## Example 2.

  To obtain data, first it is necessary to make the request to the endpoint.
  You can use the programming language of your choice.

  If the endpoint returns facility, you need to open a WebSocket connection using facility.
  You can use any WebSocket client of your choice

  ```
      Request URL WebSocket:
      wss://{{your_subdomain}}.adminolt.com/ws/{{facility}}?subscribe-broadcast
  ```


  ### This is a example with Python

  ```
  import json
  import time
  import requests # python -m pip install requests
  import websocket # pip3 install websocket-client


  def connection_websocket(facility):
    """
    param: facility -> UUID Endpoint process, it is used to open a WebSocket connection to obtain data
    
    return data. Example.
    {'unauthorized_onus': {'485754431B2CA496': {'interface': '0/11/0', 'chasis': '0', 'slot': '11', 'port': '0', 'olt': 'Huawei MA5680T', 'onu_type': '546M', 'olt_id': 4, 'class_type': 'Huawei', 'onu_type_id': 17, 'onu_type_mode': 'Bridging/Routing', 'interface_id': '4194394112', 'sn': '485754431B2CA496'}}, 'status': 'DONE', 'task_id': '0ff59c3a-8500-4aa8-909c-e5fe7a144035'}
    """

    # Request URL WebSocket:
    URL_WEBSOCKET = "wss://{{your_subdomain}}.adminolt.com/ws/{facility}?subscribe-broadcast".format(facility=facility)

    websocket.enableTrace(True)
    ws = websocket.create_connection(URL_WEBSOCKET)
    print("Sending...")
    ws.send("Get response_data")
    print("Sent")
    print("Receiving...")
    result = ws.recv()
    ws.close()

    data = json.loads(result)
    return data


  def requests_api():
    """
    Response data is obtained, first making a request to an endpoint, obtaining facility
    then open a WebSocket connection using facility to obtain data.
    """
    
    # Step 1. Request endpoint
    endpoint = "https://{{your_subdomain}}.adminolt.com/api/onu/unauthorized/"
    token = "{{your_token}}"

    headers = {
        "Authorization": "Token {0}".format(token)
    }

    response = requests.get(url=endpoint, headers=headers)

    
    # Step 2. Get facility
    result = response.json()
    facility = result.get('facility') # facility -> UUID


    # Step 3 - Connection to WebSocket
    while(True):
        # If status == 'PROGRESS', the connection is retried. And returns data if status == 'DONE'

        time.sleep(1)
        data = connection_websocket(facility) # Connection to WebSocket
        status = data.get('status')
        if status == 'DONE': # Success
            print(data) # Response data. 
            break

  # MAIN
  if __name__ == "__main__":
    requests_api()
  ```
  
  ### Result data
  ![Baeldung](https://wisphub.net/media/uploadsCKEditor/miguelangel%40wisphub/2021/12/28/example2t_Z0iCKat.png)